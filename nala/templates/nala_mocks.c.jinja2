/*
Mocks source file

Generated with Nala version {{nala_version}} (https://github.com/eerimoq/nala)
Do not edit manually
*/
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include "nala.h"
{{includes}}
{{nala_c}}
void nala_suspend_all_mocks(void)
{
{% for mock in mocks %}
    {{mock.func_name}}_mock_suspend();
{% endfor %}
}

void nala_resume_all_mocks(void)
{
{% for mock in mocks %}
    {{mock.func_name}}_mock_resume();
{% endfor %}
}

void nala_reset_all_mocks(void)
{
{% for mock in mocks %}
    {{mock.func_name}}_mock_reset();
{% endfor %}
}

void nala_assert_all_mocks_completed(void)
{
{% for mock in mocks %}
    {{mock.func_name}}_mock_assert_completed();
{% endfor %}
}
{% for mock in mocks %}

{{mock.IMPL_MARKER}} {{mock.func_name}}

{% if not mock.is_variadic_func %}
{{mock.real_decl | render}};

{% endif %}
struct _nala_data_params_for_{{mock.func_name}} {
    {% for param in mock.params_struct %}
    {{param | render}};
    {% endfor %}
    {% for param in mock.instance_members %}
    {{param | render}};
    {% endfor %}
    {% if mock.is_variadic_func %}
    struct nala_va_arg_list_t _nala_va_arg_list;
    {% endif %}
};

struct _nala_data_type_for_{{mock.func_name}} {
    struct _nala_data_params_for_{{mock.func_name}} params;
    {% if mock.return_value %}
    {{mock.return_value_decl | render}};
    {% endif %}
    int errno_value;
    {{mock.implementation_decl | render}};
    {{mock.callback_decl | render}};
    struct nala_traceback_t traceback;
};

struct _nala_instance_type_for_{{mock.func_name}} {
    struct _nala_data_type_for_{{mock.func_name}} data;
    struct _nala_instance_type_for_{{mock.func_name}} *next_p;
};

struct _nala_instances_type_for_{{mock.func_name}} {
    struct _nala_instance_type_for_{{mock.func_name}} *head_p;
    struct _nala_instance_type_for_{{mock.func_name}} *tail_p;
    int length;
};

struct {{mock.state_type}} {
    struct nala_state_t state;
    struct _nala_data_type_for_{{mock.func_name}} data;
    struct _nala_instances_type_for_{{mock.func_name}} instances;
};

static struct {{mock.state_type}} {{mock.state_name}} = {
    .state = {
        .mode = 0,
        .suspended = {
            .count = 0,
            .mode = 0
        }
    },
    .instances = {
        .head_p = NULL,
        .tail_p = NULL,
        .length = 0
    }
};

struct _nala_data_type_for_{{mock.func_name}} *nala_get_data_{{mock.func_name}}()
{
    if ({{mock.state_name}}.instances.tail_p != NULL) {
        return (&{{mock.state_name}}.instances.tail_p->data);
    } else {
        return (&{{mock.state_name}}.data);
    }
}

struct _nala_data_params_for_{{mock.func_name}} *nala_get_params_{{mock.func_name}}()
{
    return (&nala_get_data_{{mock.func_name}}()->params);
}

{{mock.wrapped_decl | render}}
{
    struct _nala_instance_type_for_{{mock.func_name}} *_nala_instance_p;
    struct _nala_data_type_for_{{mock.func_name}} *_nala_data_p;
    {% if mock.return_value %}
    {{mock.return_value_decl | render}};
    {% endif %}

    switch ({{mock.state_name}}.state.mode) {

    case 1:
    case 3:
        if ({{mock.state_name}}.state.mode == 1) {
            NALA_INSTANCES_POP({{mock.state_name}}.instances, &_nala_instance_p);

            if (_nala_instance_p == NULL) {
                NALA_TEST_FAILURE(nala_format(
                        "Mocked {{mock.func_name}}() called more times than expected.\n"));
            }

            _nala_data_p = &_nala_instance_p->data;
        } else {
            _nala_instance_p = NULL;
            _nala_data_p = &nala_state_for_{{mock.func_name}}.data;
        }

        {% for param in mock.char_pointer_params %}
        MOCK_ASSERT_IN_EQ(_nala_data_p, {{mock.func_name}}, {{param.name}});
        {% endfor %}
        {% for param in mock.pointer_params %}
        MOCK_ASSERT_IN_EQ(_nala_data_p, {{mock.func_name}}, {{param.name}});
        {% endfor %}
        {% for param in mock.non_pointer_params %}
        MOCK_ASSERT_IN_EQ(_nala_data_p, {{mock.func_name}}, {{param.name}});
        {% endfor %}

        {% for param, check in mock.set_params %}
        MOCK_ASSERT_COPY_SET_PARAM(&_nala_data_p->params,
                                   {{check}},
                                   {{mock.func_name}},
                                   {{param.name}});
        {% endfor %}

        {% if mock.is_variadic_func %}
        {
            va_list __nala_vl;
            va_start(__nala_vl, {{mock.va_list_start_arg_name}});
            nala_va_arg_list_assert(&_nala_data_p->params._nala_va_arg_list, __nala_vl);
            va_end(__nala_vl);
            nala_va_arg_list_destroy(&_nala_data_p->params._nala_va_arg_list);
        }

        {% endif %}
        errno = _nala_data_p->errno_value;

        if (_nala_data_p->callback != NULL) {
        {% if mock.is_variadic_func %}
            va_list __nala_vl;
            va_start(__nala_vl, {{mock.va_list_start_arg_name}});
            _nala_data_p->callback({{mock.forward_args}});
            va_end(__nala_vl);
        {% else %}
            _nala_data_p->callback({{mock.forward_args}});
        {% endif %}
        }

        {% if mock.return_value %}
        return_value = _nala_data_p->return_value;
        {% endif %}

        if (_nala_instance_p != NULL) {
            nala_free(_nala_instance_p);
        }
        break;

    case 2:
        {% if mock.is_variadic_func %}
        {
            va_list __nala_vl;
            va_start(__nala_vl, {{mock.va_list_start_arg_name}});
            {% if mock.return_value %}
            return_value =
            {% endif %}
            {{mock.state_name}}.data.implementation({{mock.forward_args}});
            va_end(__nala_vl);
        }
        {% else %}
            {% if mock.return_value %}
        return_value =
            {% endif %}
        {{mock.state_name}}.data.implementation({{mock.forward_args}});
        {% endif %}
        break;

    case 4:
        nala_mock_none_fail();
        exit(1);
        break;

    default:
        {% if mock.is_variadic_func %}
        {
            va_list __nala_vl;
            va_start(__nala_vl, {{mock.va_list_start_arg_name}});
            {% if mock.return_value %}
            return_value =
            {% endif %}
            {{mock.func_name}}_mock_va_arg_real({{mock.forward_args}});
            va_end(__nala_vl);
        }
        {% else %}
            {% if mock.return_value %}
        return_value =
            {% endif %}
        {{mock.real_func}}({{mock.forward_args}});
        {% endif %}
        break;
    }

    return{% if mock.return_value %} return_value{% endif %};
}

{{mock.mock_func | render}}
{
    {{mock.state_name}}.state.mode = 3;
    {% if mock.is_variadic_func %}

    if (vafmt_p == NULL) {
        NALA_TEST_FAILURE(nala_format("Variadic format cannot be NULL.\n"));
    }

    {{mock.state_name}}.data.params.vafmt_p = vafmt_p;
    nala_va_arg_list_init(&{{mock.state_name}}.data.params._nala_va_arg_list);
    va_list __nala_vl;
    va_start(__nala_vl, vafmt_p);
    nala_parse_va_list(&{{mock.state_name}}.data.params._nala_va_arg_list,
                       vafmt_p,
                       __nala_vl);
    va_end(__nala_vl);
    {% endif %}
    {% for param in mock.char_pointer_params %}
    {{mock.state_name}}.data.params.{{param.name}} = NULL;
    {{mock.state_name}}.data.params.ignore_{{param.name}}_in = true;

    if ({{param.name}} != NULL) {
        nala_set_param_string(&{{mock.state_name}}.data.params.{{param.name}}_in,
                              {{param.name}});
    } else {
        {{mock.state_name}}.data.params.ignore_{{param.name}}_in = false;
    }

    {% endfor %}
    {% for param in mock.pointer_params %}
    {{mock.state_name}}.data.params.{{param.name}} = NULL;
    {{mock.state_name}}.data.params.ignore_{{param.name}}_in = true;
    {% endfor %}
    {% for param in mock.non_pointer_params %}
    {{mock.state_name}}.data.params.{{param.name}} = {{param.name}};
    {{mock.state_name}}.data.params.ignore_{{param.name}}_in = false;
    {% endfor %}
    {% if mock.return_value %}
    {{mock.state_name}}.data.return_value = return_value;
    {% endif %}
    {{mock.state_name}}.data.errno_value = 0;
    {{mock.state_name}}.data.callback = NULL;
}

{{mock.mock_once_func | render}}
{
    struct _nala_instance_type_for_{{mock.func_name}} *_nala_instance_p;

    {{mock.state_name}}.state.mode = 1;
    _nala_instance_p = nala_xmalloc(sizeof(*_nala_instance_p));
    nala_traceback(&_nala_instance_p->data.traceback);
    {% for param, _ in mock.set_params %}
    nala_set_param_init(&_nala_instance_p->data.params.{{param.name}}_out);
    nala_set_param_init(&_nala_instance_p->data.params.{{param.name}}_in);
    _nala_instance_p->data.params.{{param.name}}_in_assert = NULL;
    _nala_instance_p->data.params.{{param.name}}_out_copy = NULL;
    {% endfor %}
    {% if mock.is_variadic_func %}

    if (vafmt_p == NULL) {
        NALA_TEST_FAILURE(nala_format("Variadic format cannot be NULL.\n"));
    }

    _nala_instance_p->data.params.vafmt_p = vafmt_p;
    nala_va_arg_list_init(&_nala_instance_p->data.params._nala_va_arg_list);
    va_list __nala_vl;
    va_start(__nala_vl, vafmt_p);
    nala_parse_va_list(&_nala_instance_p->data.params._nala_va_arg_list,
                       vafmt_p,
                       __nala_vl);
    va_end(__nala_vl);
    {% endif %}
    {% for param in mock.char_pointer_params %}
    _nala_instance_p->data.params.{{param.name}} = NULL;
    _nala_instance_p->data.params.ignore_{{param.name}}_in = true;

    if ({{param.name}} != NULL) {
        nala_set_param_string(&_nala_instance_p->data.params.{{param.name}}_in,
                              {{param.name}});
    } else {
        _nala_instance_p->data.params.ignore_{{param.name}}_in = false;
    }

    {% endfor %}
    {% for param in mock.pointer_params %}
    _nala_instance_p->data.params.{{param.name}} = NULL;
    _nala_instance_p->data.params.ignore_{{param.name}}_in = true;
    {% endfor %}
    {% for param in mock.non_pointer_params %}
    _nala_instance_p->data.params.{{param.name}} = {{param.name}};
    _nala_instance_p->data.params.ignore_{{param.name}}_in = false;
    {% endfor %}
    {% if mock.return_value %}
    _nala_instance_p->data.return_value = return_value;
    {% endif %}
    _nala_instance_p->data.errno_value = 0;
    _nala_instance_p->data.callback = NULL;
    _nala_instance_p->next_p = NULL;

    NALA_INSTANCES_APPEND({{mock.state_name}}.instances,
                          _nala_instance_p);
}

void {{mock.func_name}}_mock_ignore_in({{mock.return_value_decl | render}})
{
    {{mock.state_name}}.state.mode = 3;
    {% for param in mock.char_pointer_params %}
    {{mock.state_name}}.data.params.ignore_{{param.name}}_in = true;
    {% endfor %}
    {% for param in mock.pointer_params %}
    {{mock.state_name}}.data.params.ignore_{{param.name}}_in = true;
    {% endfor %}
    {% for param in mock.non_pointer_params %}
    {{mock.state_name}}.data.params.ignore_{{param.name}}_in = true;
    {% endfor %}
    {% if mock.return_value %}
    {{mock.state_name}}.data.return_value = return_value;
    {% endif %}
    {{mock.state_name}}.data.errno_value = 0;
    {{mock.state_name}}.data.callback = NULL;
}

void {{mock.func_name}}_mock_ignore_in_once({{mock.return_value_decl | render}})
{
    struct _nala_instance_type_for_{{mock.func_name}} *instance_p;

    {{mock.state_name}}.state.mode = 1;
    instance_p = nala_xmalloc(sizeof(*instance_p));
    nala_traceback(&instance_p->data.traceback);
    {% for param, _ in mock.set_params %}
    nala_set_param_init(&instance_p->data.params.{{param.name}}_out);
    nala_set_param_init(&instance_p->data.params.{{param.name}}_in);
    instance_p->data.params.{{param.name}}_in_assert = NULL;
    instance_p->data.params.{{param.name}}_out_copy = NULL;
    {% endfor %}
    {% if mock.is_variadic_func %}
    instance_p->data.params.vafmt_p = "";
    nala_va_arg_list_init(&instance_p->data.params._nala_va_arg_list);
    {% endif %}
    {% for param in mock.char_pointer_params %}
    instance_p->data.params.{{param.name}} = NULL;
    instance_p->data.params.ignore_{{param.name}}_in = true;
    {% endfor %}
    {% for param in mock.pointer_params %}
    instance_p->data.params.{{param.name}} = NULL;
    instance_p->data.params.ignore_{{param.name}}_in = true;
    {% endfor %}
    {% for param in mock.non_pointer_params %}
    instance_p->data.params.ignore_{{param.name}}_in = true;
    {% endfor %}
    {% if mock.return_value %}
    instance_p->data.return_value = return_value;
    {% endif %}
    instance_p->data.errno_value = 0;
    instance_p->data.callback = NULL;
    instance_p->next_p = NULL;

    NALA_INSTANCES_APPEND({{mock.state_name}}.instances,
                          instance_p);
}

{{mock.set_errno_func | render}}
{
    nala_get_data_{{mock.func_name}}()->errno_value = errno_value;
}

void {{mock.func_name}}_mock_set_callback({{mock.callback_decl | render}})
{
    nala_get_data_{{mock.func_name}}()->callback = callback;
}
{% for param in mock.ignore_params %}

void {{mock.func_name}}_mock_ignore_{{param}}_in(void)
{
    nala_get_params_{{mock.func_name}}()->ignore_{{param}}_in = true;
}
{% endfor %}
{% for param, _ in mock.set_params %}

void {{mock.func_name}}_mock_set_{{param.name}}_in(const void *buf_p, size_t size)
{
    nala_set_param_buf(&nala_get_params_{{mock.func_name}}()->{{param.name}}_in,
                       buf_p,
                       size);
}

void {{mock.func_name}}_mock_set_{{param.name}}_in_assert(void (*callback)({{param | render}}, const void *nala_buf_p, size_t nala_size))
{
    nala_get_params_{{mock.func_name}}()->{{param.name}}_in_assert = callback;
}

void {{mock.func_name}}_mock_set_{{param.name}}_in_pointer({{param | render}})
{
    struct _nala_data_params_for_{{mock.func_name}} *_nala_params_p;

    _nala_params_p = nala_get_params_{{mock.func_name}}();
    _nala_params_p->ignore_{{param.name}}_in = false;
    _nala_params_p->{{param.name}} = {{param.name}};
}

void {{mock.func_name}}_mock_set_{{param.name}}_out(const void *buf_p, size_t size)
{
    nala_set_param_buf(&nala_get_params_{{mock.func_name}}()->{{param.name}}_out,
                       buf_p,
                       size);
}

void {{mock.func_name}}_mock_set_{{param.name}}_out_copy(void (*callback)({{param | render}}, const void *nala_buf_p, size_t nala_size))
{
    nala_get_params_{{mock.func_name}}()->{{param.name}}_out_copy = callback;
}
{% endfor %}
{% if mock.is_variadic_func %}

void {{mock.func_name}}_mock_ignore_va_arg_in_at(unsigned int index)
{
    struct nala_va_arg_list_t *va_arg_list_p;

    va_arg_list_p = &nala_get_params_{{mock.func_name}}()->_nala_va_arg_list;
    nala_va_arg_list_get(va_arg_list_p, index)->ignore_in = true;
}

void {{mock.func_name}}_mock_set_va_arg_in_at(unsigned int index, const void *buf_p, size_t size)
{
    struct nala_va_arg_list_t *va_arg_list_p;
    struct nala_va_arg_item_t *item_p;

    va_arg_list_p = &nala_get_params_{{mock.func_name}}()->_nala_va_arg_list;
    item_p = nala_va_arg_list_get(va_arg_list_p, index);
    nala_set_param_buf(&item_p->in, buf_p, size);
}

void {{mock.func_name}}_mock_set_va_arg_in_pointer_at(unsigned int index, const void *buf_p)
{
    (void)index;
    (void)buf_p;

    struct _nala_instance_type_for_{{mock.func_name}} *instance_p;

    instance_p = {{mock.state_name}}.instances.tail_p;

    if (instance_p == NULL) {
        NALA_TEST_FAILURE(nala_format(
            "{{mock.func_name}}_mock_set_va_arg_in_pointer_at(...) not implemented "
            "for mock state.\n"));
    }
}

void {{mock.func_name}}_mock_set_va_arg_out_at(unsigned int index, const void *buf_p, size_t size)
{
    struct nala_va_arg_list_t *va_arg_list_p;
    struct nala_va_arg_item_t *item_p;

    va_arg_list_p = &nala_get_params_{{mock.func_name}}()->_nala_va_arg_list;
    item_p = nala_va_arg_list_get(va_arg_list_p, index);
    nala_set_param_buf(&item_p->out, buf_p, size);
}
{% endif %}

void {{mock.func_name}}_mock_none(void)
{
    {{mock.state_name}}.state.mode = 4;
}

void {{mock.func_name}}_mock_implementation({{mock.implementation_decl | render}})
{
    {{mock.state_name}}.state.mode = 2;
    {{mock.state_name}}.data.implementation = implementation;
}

void {{mock.func_name}}_mock_disable(void)
{
    {{mock.state_name}}.state.mode = 0;
}

void {{mock.func_name}}_mock_suspend(void)
{
    nala_state_suspend(&{{mock.state_name}}.state);
}

void {{mock.func_name}}_mock_resume(void)
{
    nala_state_resume(&{{mock.state_name}}.state);
}

void {{mock.func_name}}_mock_reset(void)
{
    NALA_STATE_RESET({{mock.state_name}});
}

void {{mock.func_name}}_mock_assert_completed(void)
{
    if ({{mock.state_name}}.instances.length != 0) {
        NALA_TEST_FAILURE(nala_format(
             "Mocked {{mock.func_name}}() called fewer times than expected. %d call(s) "
             "missing.\n",
             {{mock.state_name}}.instances.length));
    }
}
{% endfor %}

// Struct assertions
{% for assert_in in struct_assert_ins %}

void nala_mock_assert_in_struct_{{assert_in.name}}(const char *func_p, const char *param_p, const void *left_p, const void *right_p, size_t size)
{
    {% if assert_in.assert_in_members %}
    (void)size;
    const struct {{assert_in.name}} *actual_p = left_p;
    const struct {{assert_in.name}} *expected_p = right_p;
    char format[512];

    snprintf(&format[0],
             sizeof(format),
             "Mocked %s(%s): %%s != %%s\n",
             func_p,
             param_p);

    if ((actual_p != NULL) && (expected_p != NULL)) {
            {% for member in assert_in.assert_in_members %}
        MOCK_ASSERT_PARAM_IN_EQ(format, actual_p->{{member}}, expected_p->{{member}})
            {% endfor %}
    } else {
        MOCK_ASSERT_PARAM_IN_EQ(format, actual_p, expected_p);
    }
    {% else %}
    nala_mock_assert_memory(func_p, param_p, left_p, right_p, size);
    {% endif %}
}
{% endfor %}
